#!/usr/bin/env node
var debug = require('debug')('firstApp');
var app = require('../app');
var mongoose = require('mongoose');
var models = require('models');
var session = require('cookie-session');
app.set('port', process.env.PORT || 9000);
console.log("running");


var server = app.listen(app.get('port'), function() {
  console.log('Express server listening on port ' + server.address().port);
});

var teamSockets = {};
var io = require('socket.io').listen(server);
var nsp = io.of('/gameEngine');
nsp.on('connection',function(socket){
      var cookieS = socket.request.headers.cookie;
      var req = {
          headers : {
              cookie : cookieS
            }
        };
        var temp = req;
    session({secret:'PragyanPremierLeague',name:'PragyanPremierLeague'})(req,{},function(){});
    var matchId = req.session.match._id;
    socket.join(matchId);
    console.log(JSON.stringify(req.session));
   //associate team with socket altogether with the match
   if(!teamSockets[matchId])
        teamSockets[matchId] = {};
    if(req.session.match.team1.team == req.session.team._id)
        teamSockets[matchId].team1 = socket;
    else
        teamSockets[matchId].team2 = socket;
   
   
   var players = findClientsSocket(matchId,'/gameEngine');

    //i have no fucking idea why it acts like that... but here 0==1client , 1==2client log players.length and see for yourself :P
    if(players.length==1){
        //setup 1st innings of match
        initInnings(1,matchId);
    }
});

function initInnings(inningsNumber,matchId){
        models.Match.findOneAndUpdate({_id : matchId},{$set : {innings : inningsNumber}},{new:true})
        .populate('team1.team team2.team team1.playerStats._id team2.playerStats._id')
        .exec(function(err,match){
            if(err){
                console.log(err);
                return;
            }
            var msg  = {
                match: JSON.stringify(match)
            };
            msg.batting = (inningsNumber==1);
            teamSockets[matchId].team1.emit('initialize',msg);
            msg.batting = (inningsNumber==2);
            teamSockets[matchId].team2.emit('initialize',msg);
        });
}
function findClientsSocket(roomId, namespace) {
    var res = [], ns = io.of(namespace ||"/");    // the default namespace is "/"
        for (var id in ns.connected) {
                var index = ns.connected[id].rooms.indexOf(roomId) ;
                if(index !== -1) {
                    res.push(ns.connected[id]);
                }
        }
    return res;
}
