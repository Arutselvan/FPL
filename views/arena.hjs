{{<layout}}
{{$content}}
    <h1><span class="page-header">Arena</span></h1>
	<br>
    <span style="float:left;margin-left:5px;color:#959595;font-size:12px;font-weight:700">Wait here to see online players.</span>
    <div id="teamList" style="margin-left:10px;display:inline-block">
    </div>

   <script type="text/jsx">
   var isOldTitle = true;
   var oldTitle = "Arena";
   var newTitle = "Arena";
   var interval = null;
   function changeTitle() {
	   document.title = isOldTitle ? oldTitle : newTitle;
	   isOldTitle = !isOldTitle;
   }
   interval = setInterval(changeTitle, 1000);
   $(window).focus(function () {
		newTitle = oldTitle;
		$("title").text(oldTitle);
		});
    var socket = io('/arena');
    
    socket.on('redirect',function(msg){
        location.replace('/Match/selectPlayers');
    });
    var TeamRow = React.createClass({
        getInitialState: function(){
            return {clicked:false,buttonValue:"Invite",buttonClass:"btn btn-info "};
        },
        render : function(){
          this.setInviteHandler();
          return <tr id={this.props.row.team._id}><td>{this.props.row.team.name}</td><td><input className={this.state.buttonClass}type="button" value={this.state.buttonValue} disabled={this.state.clicked} onClick= {this.clickHandler}/></td></tr>;
        },
        clickHandler:function(evt){
            if(this.buttonValue!="Invited"){
                this.setState({
                    clicked : true,
                    buttonValue : "Invited",
                    buttonClass:"btn btn-default"
                });
                socket.emit('invite',this.props.row.team._id);
            }
        },
        setInviteHandler:function(){
            var self = this;
            socket.on(this.props.row.team._id,function(msg){
                //console.log("yo");
		newTitle = self.props.row.team.name +" has invited you!"; 
		//alert(newTitle);
                self.setState({
                    buttonValue : "Accept Invitation",
                    buttonClass:"btn btn-danger"
                });
            });
        }
    });
    var TeamList = React.createClass({
        render:function(){
            var teams = this.props.tms;
            var html=[];
            return (
                <table className='table table-striped'><tbody>{teams.map(function(team){
                return <TeamRow key={team.id} row={team}/>;
                })
                }</tbody></table>
            )
        }

});
   
    var teams = {};
    var team = {{{team}}}
    var invites = {};
    socket.on('updateOnlineList',function(teamList){
        teams = [];
        for(var key in teamList){
            if(key!=team._id)
                teams.push(teamList[key]);
            else{
            }
        }
        if(teams!=null){
            React.render(
                <TeamList tms = {teams} />,
                document.getElementById('teamList')
            ); 
        }
    });


</script>
{{/content}}
{{/layout}}
